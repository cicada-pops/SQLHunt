# Generated by Django 5.2.2 on 2025-09-01 13:41

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('xp', models.PositiveIntegerField(default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'managed': True,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Case',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('short_description', models.CharField(default='Краткое описание отсутствует', max_length=255)),
                ('required_xp', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('reward_xp', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('answer', models.CharField(max_length=50)),
            ],
            options={
                'managed': True,
                'indexes': [models.Index(fields=['title'], name='users_case_title_a2745c_idx')],
            },
        ),
        migrations.CreateModel(
            name='AvailableTable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('table', models.CharField(max_length=50)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.case')),
            ],
            options={
                'managed': True,
                'indexes': [models.Index(fields=['case'], name='users_avail_case_id_a4a855_idx')],
                'unique_together': {('case', 'table')},
            },
        ),
        migrations.CreateModel(
            name='UserProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('не начато', 'Не начато'), ('в процессе', 'В процессе'), ('завершено', 'Завершено')], default='не начато', max_length=20)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.case')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'managed': True,
                'indexes': [models.Index(fields=['case', 'status'], name='users_userp_case_id_a9c848_idx'), models.Index(fields=['case', 'user'], name='users_userp_case_id_c0a4ae_idx'), models.Index(fields=['user'], name='users_userp_user_id_156ffc_idx')],
                'unique_together': {('user', 'case')},
            },
        ),
    ]

services:
  frontend:
    build:
      dockerfile: frontend/Dockerfile
      context: .
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    env_file:
      - ./frontend/.env
    volumes:
      - ./frontend:/app/
      - /app/node_modules
    ports:
      - "3000:3000"
    networks:
      - backend


  db1:
    image: postgres:17-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${DB_USERS_PASSWORD}
      POSTGRES_DB: ${DB_USERS}
    ports:
      - "5433:5432"
    volumes:
      - users_db:/var/lib/postgresql/data
    env_file:
      - ./backend/.env
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${DB_USERS}"]
      interval: 5s
      timeout: 5s
      retries: 5

  db2:
    image: postgres:17-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${DB_INVESTIGATIONS_PASSWORD}
      POSTGRES_DB: ${DB_INVESTIGATIONS}
    ports:
      - "5432:5432"
    volumes:
      - investigations_db:/var/lib/postgresql/data
    env_file:
      - ./backend/.env
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${DB_INVESTIGATIONS}"]
      interval: 5s
      timeout: 5s
      retries: 5

  broker:
    image: "rabbitmq:alpine"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 5s
      timeout: 10s
      retries: 5

  result:
    image: "redis:alpine"
    networks:
      - backend

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    command: >
      sh -c "
        python manage.py makemigrations &&
        python manage.py migrate --database=users &&
        python manage.py migrate investigations --database=investigations && 
        python manage.py generate_investigations &&
        python manage.py load_cases &&
        python manage.py runserver_plus 0.0.0.0:8000 --cert-file cert.crt
      "
    ports:
      - "8000:8000"
    depends_on:
      db1:
        condition: service_healthy
      db2:
        condition: service_healthy
      broker:
        condition: service_healthy
      result:
        condition: service_started
    env_file:
      - ./backend/.env
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./backend:/app/
      - /app/.venv
    networks:
      - backend

  celery:
    build:
      context: .
      dockerfile: backend/Dockerfile
    command: celery --app=core.celery_app worker --loglevel=info
    depends_on:
      broker:
        condition: service_healthy
      result:
        condition: service_started
    environment:
    - PYTHONPATH=/app/backend
    env_file: 
      - ./backend/.env
    networks:
      - backend

volumes:
  users_db:
  investigations_db:

networks:
  backend:
    driver: bridge